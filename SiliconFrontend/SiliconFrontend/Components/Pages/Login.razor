@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SiliconFrontend.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>Sign in</PageTitle>

<section class="sign-in">
    <div class="container">

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="signin">
            <DataAnnotationsValidator />
            <h1>Welcome Back</h1>
            <p>Don’t have an account yet? <a href="/signup">Sign up here.</a></p>


            <div class="account-form">

                <div class="input-group">
                    <label>Email</label>
                    <div><InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your Email address" /></div>
                    <ValidationMessage For="() => Input.Email" />
                </div>
                <div class="input-group">
                    <label>Password</label>
                    <div><InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="Enter your password" /></div>
                    <ValidationMessage For="() => Input.Password" />
                </div>

                <div class="remember-me">
                    <div class="checkbox-group">
                        <div><InputCheckbox type="checkbox" @bind-Value="Input.RememberMe" autocomplete="remember" aria-required="true" /></div>
                        <label>Remember me?</label>
                    </div>
                </div>
                <div class="error-message">
                    @ErrorMessage
                </div>
                <button class="theme-btn" type="submit">Sign In</button>
            </div>
            <a id="forgot-pw" href="#">Forgot your password?</a>
        </EditForm>
    </div>
</section>



@code {
    private string? ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/account");
        }
        else
        {
            ErrorMessage = "Incorrect Email or Password";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
