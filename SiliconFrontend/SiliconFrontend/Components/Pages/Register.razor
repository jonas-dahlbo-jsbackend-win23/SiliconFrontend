@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using SiliconFrontend.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager


<PageTitle>Sign Up</PageTitle>


<section class="sign-up">
    <div class="container">

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">
                @ErrorMessage
            </div>
        }

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup">
            <DataAnnotationsValidator />
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/signin">Sign in here.</a></p>


            <div class="account-form">
                <div class="input-group" id="firstname">
                    <label>First Name</label>
                    <div><InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" /></div>
                    <ValidationMessage For="() => Input.FirstName" />
                </div>
                <div class="input-group" id="lastname">
                    <label>Last Name</label>
                    <div><InputText @bind-Value="Input.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="Enter your surname" /></div>
                    <ValidationMessage For="() => Input.LastName" />
                </div>
                <div class="input-group" id="email">
                    <label>Email</label>
                    <div><InputText type="email" @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your Email address" /></div>
                    <ValidationMessage For="() => Input.Email" />
                </div>
                <div class="input-group" id="password">
                    <label>Password</label>
                    <div><InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="Enter your password" /></div>
                    <ValidationMessage For="() => Input.Password" />
                </div>
                <div class="input-group" id="confirm">
                    <label>Confirm password</label>
                    <div><InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="confirm" aria-required="true" placeholder="Please confirm your password" /></div>
                    <ValidationMessage For="() => Input.ConfirmPassword" />
                </div>
                <button class="theme-btn" id="btn" type="submit">Sign Up</button>
            </div>
        </EditForm>
    </div>
</section>


@code {

    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    public async Task RegisterUser(EditContext editContext)
    {

        var user = new ApplicationUser
            {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                UserName = Input.Email,
                Email = Input.Email,
                Bio = "",
                Address = new AddressEntity{}
            };

        if (await UserManager.Users.AnyAsync(x => x.Email == user.Email))
        {
            ErrorMessage = "Email is already in use.";
            return;
        }

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
            return;

        NavigationManager.NavigateTo(ReturnUrl ?? "/signin");
    }


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
